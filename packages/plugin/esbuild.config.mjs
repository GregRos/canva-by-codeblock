import esbuild from "esbuild";
import process from "node:process";
import builtins from "builtin-modules";
import { sassPlugin } from "esbuild-sass-plugin";
import { copy } from 'esbuild-plugin-copy';
import { renamePlugin } from "./tools/rename-plugin.mjs";
const prod = process.argv[2] === "production";

const context = await esbuild.context(
	/**  @type {esbuild.BuildOptions} */
	{
		banner: {
			js: getBanner(),
		},
		entryPoints: ["src/main.ts"],
		bundle: true,
		external: [
			"obsidian",
			"electron",
			"@codemirror/autocomplete",
			"@codemirror/collab",
			"@codemirror/commands",
			"@codemirror/language",
			"@codemirror/lint",
			"@codemirror/search",
			"@codemirror/state",
			"@codemirror/view",
			"@lezer/common",
			"@lezer/highlight",
			"@lezer/lr",
			...builtins,
		],
		format: "cjs",
		target: "es2018",
		sourcemap: prod ? false : "inline",
		treeShaking: true,
		outfile: "dist/main.js",
		minify: prod,
		plugins: [
			sassPlugin(
				{
					loadPaths: ["src/embed-styling.scss"],
					outfile: "style.css",
				}
			),
			copy({
				assets: [{
					from: "./manifest.json",
					to: "./manifest.json"
				}, {
					from: "versions.json",
					to: "./versions.json"
				}],
				watch: !prod
			}),
			renamePlugin(),
		],
	});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}

function getBanner() {
	return `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
		`;
}
